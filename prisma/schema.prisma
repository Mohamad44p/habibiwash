// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  SEDAN
  SUV
  VAN
}

model Package {
  id          String       @id @default(cuid())
  name        String
  image       String?
  featured    Boolean      @default(false)
  basePrice   Float        @default(0) 
  subPackages SubPackage[]
  addOns      AddOn[]     @relation("PackageAddOns")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Booking     Booking[]
}

model SubPackage {
  id          String   @id @default(cuid())
  name        String
  description String
  prices      Price[]
  duration    Int 
  packageId   String
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
}

model Price {
  id           String      @id @default(cuid())
  vehicleType  VehicleType 
  price        Float
  subPackageId String
  subPackage   SubPackage @relation(fields: [subPackageId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id            String        @id @default(cuid())
  packageId     String
  package       Package       @relation(fields: [packageId], references: [id])
  subPackageId  String?
  vehicleType   String
  date          DateTime
  time          String
  addOns        AddOn[]
  timeSlot      TimeSlot      @relation(fields: [timeSlotId], references: [id])
  timeSlotId    String
  customerName  String
  customerEmail String
  customerPhone String
  notes         String?
  status        BookingStatus @default(PENDING)
  totalPrice    Float         @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model AddOn {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  icon        String 
  bookings    Booking[]
  packages    Package[] @relation("PackageAddOns") 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model TimeSlot {
  id        String    @id @default(cuid())
  date      DateTime
  startTime String
  endTime   String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Booking   Booking[]

  @@unique([date, startTime]) 
}

model BlockedTime {
  id        String   @id @default(cuid())
  date      DateTime?
  startTime String?
  endTime   String?
  isFullDay Boolean  @default(false)
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
